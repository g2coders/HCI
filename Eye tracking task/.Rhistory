ggplot(aes(x = .prediction, y = condition)) +
stat_slab()
ABC %>%
add_predicted_draws(m) %>%
ggplot(aes(x = .prediction, y = condition)) +
stat_slab()
## but is really unsatisfying..
test %>%
ggplot(aes(x = prediction, fill = Teacher)) +
geom_density(alpha = 0.2) +
stat_halfeye(~Teacher)
ABC %>%
add_predicted_draws(m) %>%
ggplot(aes(x = .prediction, y = condition)) +
stat_halfeye()
library(pacman)
p_load(tidyverse, brms, tidybayes, ggdist, modelr)
empty_data %>%
add_predicted_draws(newdata = empty_data,
model = all_teachers_updated) %>%
ggplot(y = Teacher, x = .prediction) +
stat_halfeye()
ABC
summary(m)
## We really should be able to make the (below) work:
## If we can't then I bet we can with intercept model..
## https://cran.r-project.org/web/packages/tidybayes/vignettes/tidy-brms.html#posterior-predictions
empty_data <- tibble(
Questions = c(10, 12, 172, 65),
Teacher = c("RF", "KT", "DC", "MW")
)
empty_data %>%
add_predicted_draws(newdata = empty_data,
model = all_teachers2) %>%
ggplot(y = Teacher, x = .prediction) +
stat_halfeye()
## this sort of works ..
test <- empty_data %>%
add_predicted_draws(all_teachers2) %>%
rename(prediction = .prediction,
draw = .draw) %>%
select(Questions, Teacher, prediction, draw)
View(test)
empty_data %>%
add_predicted_draws(newdata = empty_data,
model = all_teachers2) %>%
ggplot(y = Teacher, x = .prediction) +
stat_halfeye()
test2 <- ABC %>%
add_predicted_draws(m)
empty_data %>%
add_predicted_draws(#newdata = empty_data,
model = all_teachers2) %>%
ggplot(y = Teacher, x = .prediction) +
stat_halfeye()
## but is really unsatisfying..
test %>%
ggplot(aes(x = prediction, fill = Teacher)) +
geom_density(alpha = 0.2) +
facet_wrap(~Teacher)
## this sort of works ..
test <- empty_data %>%
add_predicted_draws(all_teachers2) %>%
rename(prediction = .prediction,
draw = .draw) %>%
select(Questions, Teacher, prediction, draw)
View(test)
summary(all_teachers2)
## We really should be able to make the (below) work:
## If we can't then I bet we can with intercept model..
## https://cran.r-project.org/web/packages/tidybayes/vignettes/tidy-brms.html#posterior-predictions
empty_data <- tibble(
Questions = c(10, 12, 172, 65),
Teacher = c("TeacherRF",
"TeacherKT",
"TeacherDC",
"TeacherMW"))
empty_data %>%
add_predicted_draws(#newdata = empty_data,
model = all_teachers2) %>%
ggplot(y = Teacher, x = .prediction) +
stat_halfeye()
## We really should be able to make the (below) work:
## If we can't then I bet we can with intercept model..
## https://cran.r-project.org/web/packages/tidybayes/vignettes/tidy-brms.html#posterior-predictions
empty_data <- tibble(
Questions = c(10, 12, 172, 65),
Teacher = as_factor(c("RF", "KT", "DC", "MW")))
empty_data %>%
add_predicted_draws(#newdata = empty_data,
model = all_teachers2) %>%
ggplot(y = Teacher, x = .prediction) +
stat_halfeye()
?stat_halfeye()
model = all_teachers2) %>%
ggplot(y = as_factor(Teacher), x = .prediction) +
stat_halfeye()
empty_data %>%
add_predicted_draws(#newdata = empty_data,
model = all_teachers2) %>%
ggplot(y = as_factor(Teacher), x = .prediction) +
stat_halfeye()
## this sort of works ..
test <- empty_data %>%
add_predicted_draws(all_teachers2) %>%
rename(prediction = .prediction,
draw = .draw) %>%
select(Questions, Teacher, prediction, draw)
test %>%
ggplot() +
stat_halfeye(y = as_factor(Teacher),
x = prediction)
test %>%
ggplot() +
stat_halfeye(y = Teacher,
x = prediction)
View(test)
test %>%
ggplot() +
stat_halfeye(aes(y = Teacher,
x = prediction))
test %>%
ggplot() +
stat_halfeye(aes(y = Teacher,
x = prediction)) +
facet_wrap(~ Teacher)
test %>%
ggplot() +
stat_halfeye(aes(y = Teacher,
x = prediction))
View(test)
View(new_data)
View(empty_data)
View(new_data)
## plot them
test %>%
ggplot() +
stat_halfeye(aes(y = Teacher,
x = prediction)) +
geom_vline(data = new_data,
aes(xintercept = Correct),
color = Teacher)
## plot them
test %>%
ggplot() +
stat_halfeye(aes(y = Teacher,
x = prediction)) +
geom_vline(data = new_data,
aes(xintercept = Correct,
color = Teacher))
## plot them (custom function)
actual_vs_predpost <- function(df, person){
p <- df %>% filter(Teacher == person) %>%
ggplot() +
stat_halfeye(aes(y = Teacher,
x = prediction)) +
geom_vline(data = new_data,
aes(xintercept = Correct,
color = Teacher))
return(p)
}
## this sort of works ..
predicted_values <- empty_data %>%
add_predicted_draws(all_teachers2) %>%
rename(prediction = .prediction,
draw = .draw) %>%
select(Questions, Teacher, prediction, draw)
Ric <- actual_vs_predpost(predicted_values, Riccardo)
Ric <- actual_vs_predpost(predicted_values, "Riccardo")
Ric
Ric <- actual_vs_predpost(predicted_values, "RF")
Ric
## plot them (custom function)
actual_vs_predpost <- function(df, person){
p <- df %>% filter(Teacher == person) %>%
ggplot() +
stat_halfeye(aes(x = prediction)) +
geom_vline(data = new_data,
aes(xintercept = Correct))
return(p)
}
Ric <- actual_vs_predpost(predicted_values, "RF")
Ric
## plot them (custom function)
actual_vs_predpost <- function(df, person){
p <- df %>% filter(Teacher == person) %>%
ggplot() +
stat_halfeye(aes(x = prediction)) +
geom_vline(data = subset(new_data, Teacher == person),
aes(xintercept = Correct))
return(p)
}
Ric <- actual_vs_predpost(predicted_values, "RF")
Ric
## plot them (custom function)
actual_vs_predpost <- function(df, person){
p <- df %>% filter(Teacher == person) %>%
ggplot() +
stat_gradientinterval(aes(x = prediction)) +
geom_vline(data = subset(new_data, Teacher == person),
aes(xintercept = Correct))
return(p)
}
Ric <- actual_vs_predpost(predicted_values, "RF")
Ric
p <- df %>% filter(Teacher == person) %>%
ggplot() +
stat_histinterval(aes(x = prediction)) +
geom_vline(data = subset(new_data, Teacher == person),
aes(xintercept = Correct))
## plot them (custom function)
actual_vs_predpost <- function(df, person){
p <- df %>% filter(Teacher == person) %>%
ggplot() +
stat_histinterval(aes(x = prediction)) +
geom_vline(data = subset(new_data, Teacher == person),
aes(xintercept = Correct))
return(p)
}
Ric <- actual_vs_predpost(predicted_values, "RF")
Ric
Tylle <- actual_vs_predpost(predicted_values, "KT")
Tylle
p <- df %>% filter(Teacher == person) %>%
ggplot() +
stat_halfeye(aes(x = prediction)) +
geom_vline(data = subset(new_data, Teacher == person),
aes(xintercept = Correct))
return(p)
## plot them (custom function)
actual_vs_predpost <- function(df, person){
p <- df %>% filter(Teacher == person) %>%
ggplot() +
stat_halfeye(aes(x = prediction)) +
geom_vline(data = subset(new_data, Teacher == person),
aes(xintercept = Correct))
return(p)
}
Ric <- actual_vs_predpost(predicted_values, "RF")
Tylle <- actual_vs_predpost(predicted_values, "KT")
Tylle
## plot them (custom function)
actual_vs_predpost <- function(df, person){
p <- df %>% filter(Teacher == person) %>%
ggplot() +
stat_dotsinterval(aes(x = prediction)) +
geom_vline(data = subset(new_data, Teacher == person),
aes(xintercept = Correct))
return(p)
}
Ric <- actual_vs_predpost(predicted_values, "RF")
Tylle <- actual_vs_predpost(predicted_values, "KT")
Tylle
p <- df %>% filter(Teacher == person) %>%
ggplot() +
stat_histinterval(aes(x = prediction)) +
geom_vline(data = subset(new_data, Teacher == person),
aes(xintercept = Correct))
## plot them (custom function)
actual_vs_predpost <- function(df, person){
p <- df %>% filter(Teacher == person) %>%
ggplot() +
stat_histinterval(aes(x = prediction)) +
geom_vline(data = subset(new_data, Teacher == person),
aes(xintercept = Correct))
return(p)
}
Ric <- actual_vs_predpost(predicted_values, "RF")
Tylle <- actual_vs_predpost(predicted_values, "KT")
Tylle
?stat_histinterval()
## plot them (custom function)
actual_vs_predpost <- function(df, person){
p <- df %>% filter(Teacher == person) %>%
ggplot() +
stat_histintervalh(aes(x = prediction)) +
geom_vline(data = subset(new_data, Teacher == person),
aes(xintercept = Correct))
return(p)
}
Ric <- actual_vs_predpost(predicted_values, "RF")
Tylle <- actual_vs_predpost(predicted_values, "KT")
Tylle
?stat_histinterval()
## plot them (custom function)
actual_vs_predpost <- function(df, person){
p <- df %>% filter(Teacher == person) %>%
ggplot() +
stat_histintervalh(aes(x = prediction)) +
geom_vline(data = subset(new_data, Teacher == person),
aes(xintercept = Correct))
return(p)
}
Ric <- actual_vs_predpost(predicted_values, "RF")
Tylle <- actual_vs_predpost(predicted_values, "KT")
Tylle
## plot them (custom function)
actual_vs_predpost <- function(df, person){
p <- df %>% filter(Teacher == person) %>%
ggplot() +
stat_histinterval(aes(x = prediction)) +
geom_vline(data = subset(new_data, Teacher == person),
aes(xintercept = Correct))
return(p)
}
Ric <- actual_vs_predpost(predicted_values, "RF")
Tylle <- actual_vs_predpost(predicted_values, "KT")
Tylle
p <- df %>% filter(Teacher == person) %>%
ggplot() +
stat_histinterval(aes(x = prediction),
width = 1) +
geom_vline(data = subset(new_data, Teacher == person),
aes(xintercept = Correct))
## plot them (custom function)
actual_vs_predpost <- function(df, person){
p <- df %>% filter(Teacher == person) %>%
ggplot() +
stat_histinterval(aes(x = prediction),
width = 1) +
geom_vline(data = subset(new_data, Teacher == person),
aes(xintercept = Correct))
return(p)
}
Ric <- actual_vs_predpost(predicted_values, "RF")
Tylle <- actual_vs_predpost(predicted_values, "KT")
Tylle
## plot them (custom function)
actual_vs_predpost <- function(df, person){
p <- df %>% filter(Teacher == person) %>%
ggplot() +
stat_halfeye(aes(x = prediction)) +
geom_vline(data = subset(new_data, Teacher == person),
aes(xintercept = Correct))
return(p)
}
Ric <- actual_vs_predpost(predicted_values, "RF")
Tylle <- actual_vs_predpost(predicted_values, "KT")
Tylle
Daina <- actual_vs_predpost(predicted_values, "DC")
Daina
View(d)
160/198
148/172
Mikkel <- actual_vs_predpost(predicted_values, "MW")
MW
Mikkel
## plot together
p_load(cowplot)
plot_grid(Ric, Tylle, Daina, Mikkel)
data <- c(rep(1, 700), rep(0, 300))
SD <- apply(data, sd)
?apply()
SD <- apply(data, 1, sd)
SD <- apply(data, 2, sd)
SD <- sapply(x = data, 2, sd)
SD <- sapply(x = data, 1, sd)
SEM <- SD/sqrt(length(data))
y <- 700
n <- 1000
estimate <- y/n
SE <- sqrt(estimate*(1-estimate)/n)
int_95 <- estimate + qnorm(c(0.025, 0.975))*se
int_95 <- estimate + qnorm(c(0.025, 0.975))*SE
## se men
y_men <- 400*.57
## se men
y_men <- 400*.57
n_men <- 400
SE_men <- sqrt(y_men/(1-y_men)/n)
SE_men <- sqrt(y_men/(1-y_men)/n_men)
SE_men <- sqrt(y_men*(1-y_men)/n_men)
## se men
y_men <- 400*.57
y_est <- 228/400
n_men <- 400
## se men
y_men <- 400*.57
y_est <- 228/400
n_men <- 400
SE_men <- sqrt(y_est*(1-y_est)/n_men)
# se women
y_women <- 600/.45
y_west <- y_women/n_women
# se women
y_women <- 600/.45
n_women <- 600
y_west <- y_women/n_women
# se women
y_women <- 600*.45
n_women <- 600
y_west <- y_women/n_women
SE_women <- sqrt(y_west*(1-y_west)/n_women)
# se between
sum <- sqrt(SE_men^2 + SE_women^2)
pacman::p_load(tidyverse, lmerTest)
#Set your WD here:
df <- read.csv("clean_data.csv")
df$website <- as.factor(df$website)
df$event <- as.factor(df$event)
df$name <- as.factor(df$name)
df <- read.csv("clean_data.csv")
setwd("C:/Users/95/Dropbox/MastersSem2/HCI/week1")
pacman::p_load(tidyverse, lmerTest)
setwd("C:/Users/95/Dropbox/MastersSem2/HCI/week1")
df <- read.csv("clean_data.csv")
df <- read.csv("clean_data.csv")
#Set your WD here:
setwd("C:/Users/95/Dropbox/MastersSem2/HCI/week1")
setwd("C:/Users/95/Dropbox/MastersSem2/HCI/week1/Eye tracking task")
#Set your WD here:
setwd("C:/Users/95/Dropbox/MastersSem2/HCI/week1/Eye tracking task")
df <- read_csv("clean_data.csv")
df <- read_csv("clean_data.csv") %>%
mutate(website = as_factor(website),
event = as_factor(event),
name = as_factor(name))
View(df)
df <- read_csv("clean_data.csv")
#Set your WD here:
setwd("C:/Users/95/Dropbox/MastersSem2/HCI/week1/Eye tracking task")
df <- read_csv("clean_data.csv")
df <- df %>%
mutate(website = as_factor(website),
event = as_factor(event),
name = as_factor(name))
df <- df %>%
mutate(website = as_factor(website),
event = as_factor(event),
name = as_factor(name)) %>%
glimpse()
df <- read_csv("clean_data.csv") %>%
glimpse()
df <- df %>%
mutate(website = as_factor(website),
event = as_factor(event),
name = as_factor(name),
order_tickets_online = as_factor(order_tickets_online)) %>%
glimpse()
df <- df %>%
mutate(website = as_factor(website),
event = as_factor(event),
name = as_factor(name),
order_tickets_online = as_factor(order_tickets_online),
session = as_factor(session),
cinemaxx_1st = as_factor(cinemaxx_1st)) %>%
glimpse()
# Here is a prelimniary model:
# 1. What is it asking?
# 2. How would you interpret these results?
# 3. How would you improve it?
m1 <- glmer(event ~ website + (1|name), df, family = binomial)
summary(m1)
# Here is a prelimniary model:
# 1. What is it asking?
# 2. How would you interpret these results?
# 3. How would you improve it?
df %>%
glimpse()
m1 <- glmer(event ~ website + (1|name), df, family = binomial)
View(df)
df <- read_csv("clean_data.csv") %>%
glimpse()
View(df)
d <- diamonds
library(tidyverse)
d <- diamonds
d <- diamonds %>%
glimpse()
?var()
var(d$price)
var <- d %>%
mutate(var = mean(x^2) - mean(x)^2)
View(var)
sum(var$var)
d <- diamonds %>%
glimpse()
d_var <- d %>%
mutate(price_var = (price - mean(price))^2)
View(d_var)
d_var <- d %>%
mutate(price_var = (price - mean(price))^2) %>%
summarize(sum(price_var)/53940)
d_var <- d %>%
mutate(price_var = (price - mean(price))^2) %>%
summarize(sum(price_var)/53940) %>%
glimpse()
var(d$price)
d_var <- d %>%
mutate(price_var = (price - mean(price))^2) %>%
summarize(sum(price_var)/rowsum()) %>%
glimpse()
d_var <- d %>%
mutate(price_var = (price - mean(price))^2) %>%
summarize(sum(price_var)/length(row())) %>%
glimpse()
d_var <- d %>%
mutate(price_var = (price - mean(price))^2) %>%
summarize(sum(price_var)/length(rowsum())) %>%
glimpse()
d_var <- d %>%
mutate(price_var = (price - mean(price))^2) %>%
summarize(sum(price_var)/nrow) %>%
glimpse()
d_var <- d %>%
mutate(price_var = (price - mean(price))^2) %>%
summarize(sum(price_var)/nrow()) %>%
glimpse()
d_var <- d %>%
mutate(price_var = (price - mean(price))^2) %>%
summarize(sum(price_var)/length(price_var)) %>%
glimpse()
